import 'dotenv/config';
import db from './config/db.js';
import { matrizAutorizaciones, User } from './modules/gestion/gestionRelations.js';

async function testExclusionJefes() {
    try {
        // Conectar a la base de datos
        await db.authenticate();
        console.log('‚úÖ Conectado a la base de datos correctamente.');

        console.log('\nüîç Verificando matriz de autorizaciones...');
        
        // Buscar todas las autorizaciones
        const autorizaciones = await matrizAutorizaciones.findAll({
            include: [{
                model: User,
                as: 'responsable',
                attributes: ['id', 'name', 'email']
            }]
        });

        console.log(`üìä Total de autorizaciones encontradas: ${autorizaciones.length}`);

        // Agrupar por responsable
        const resumen = {};
        autorizaciones.forEach(auth => {
            if (auth.responsable) {
                const responsableId = auth.responsable.id;
                if (!resumen[responsableId]) {
                    resumen[responsableId] = {
                        id: responsableId,
                        name: auth.responsable.name,
                        email: auth.responsable.email,
                        autorizaciones: []
                    };
                }
                resumen[responsableId].autorizaciones.push({
                    empresa: auth.empresa,
                    emisor: auth.emisor
                });
            }
        });

        console.log('\nüë• Responsables en matriz de autorizaciones:');
        Object.values(resumen).forEach(responsable => {
            const esJefe = responsable.id === 22 || responsable.id === 23;
            const estado = esJefe ? '‚ùå JEFE (NO asignaci√≥n autom√°tica)' : '‚úÖ NORMAL (S√ç asignaci√≥n autom√°tica)';
            
            console.log(`\n${estado}`);
            console.log(`  ID: ${responsable.id}`);
            console.log(`  Nombre: ${responsable.name}`);
            console.log(`  Email: ${responsable.email}`);
            console.log(`  Autorizaciones: ${responsable.autorizaciones.length}`);
            
            responsable.autorizaciones.forEach(auth => {
                console.log(`    - ${auth.empresa} | ${auth.emisor}`);
            });
        });

        // Simular la l√≥gica de asignaci√≥n
        console.log('\nüß™ SIMULANDO L√ìGICA DE ASIGNACI√ìN:');
        
        Object.values(resumen).forEach(responsable => {
            const responsableId = responsable.id;
            
            if (responsableId !== 22 && responsableId !== 23) {
                console.log(`‚úÖ Asignaci√≥n autom√°tica a responsable ID: ${responsableId} (${responsable.name})`);
            } else {
                console.log(`‚ö†Ô∏è Omitiendo asignaci√≥n autom√°tica para jefe ID: ${responsableId} (${responsable.name})`);
            }
        });

        console.log('\nüìã RESUMEN:');
        console.log('- Los jefes (IDs 22 y 23) NO recibir√°n asignaciones autom√°ticas');
        console.log('- Los dem√°s responsables S√ç recibir√°n asignaciones autom√°ticas');
        console.log('- Los registros sin asignaci√≥n autom√°tica quedar√°n pendientes de asignaci√≥n manual');

    } catch (error) {
        console.error('‚ùå Error en testExclusionJefes:', error);
    } finally {
        process.exit(0);
    }
}

// Ejecutar la prueba
testExclusionJefes(); 